{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../AddAlias.svelte",
    "../../AddPath.svelte",
    "../../Aliases.svelte",
    "../../Paths.svelte"
  ],
  "sourcesContent": [
    "<div id='addAliasPart'>\n  {#if add}\n    <input \n      bind:value={aliaskey}\n    />\n    <span class='equal'>\n      =\n    </span>\n    <input\n      bind:value={aliasdef}\n      on:keyup={(e) => {\n        if(e.key === 'Enter') {\n          e.preventDefault();\n          add = false;\n          dispatch('newAlias', {\n            key: aliaskey,\n            def: aliasdef\n          });\n        }\n      }}\n    />\n    <span\n      on:click={() => { \n        dispatch('newAlias', {\n          key: aliaskey,\n          def: aliasdef\n        }); \n        add = false; \n      }}\n    >\n      +\n    </span>\n  {:else}\n    <span\n      class=\"add\"\n      on:click={() => { add = true; aliaskey = ''; aliasdef = ''; }}\n    >\n      +\n    </span>\n  {/if}\n</div>\n\n<style>\n  #addAliasPart {\n    display: flex;\n    flex-direction: row;\n    margin: 20px 0px 10px 0px;\n    padding: 0px;\n  }\n\n  #addAliasPart input {\n    width: 125px;\n  }\n\n  .equal {\n    margin: 5px;\n    color: black;\n  }\n\n  .add {\n    color: red;\n    cursor: pointer;\n  }\n</style>\n\n<script>\n  import { createEventDispatcher } from 'svelte';\n  \n  const dispatch = createEventDispatcher();\n  \n  let add = false;\n  let aliaskey = '';\n  let aliasdef = '';\n</script>\n",
    "<div id='addPathPart'>\n  {#if add}\n    <input \n      bind:value={path}\n      on:keyup={(e) => {\n        if(e.key === 'Enter') {\n          e.preventDefault();\n          add = false;\n          dispatch('newPath', path);\n        }\n      }}\n    />\n    <span\n      class=\"add\"\n      on:click={() => { dispatch('newPath', path); add = false; }}\n    >\n      +\n    </span>\n  {:else}\n    <span\n      class=\"add\"\n      on:click={() => { add = true; path = ''; }}\n    >\n      +\n    </span>\n  {/if}\n</div>\n\n<style>\n  #addPathPart {\n    display: flex;\n    flex-direction: row;\n    margin: 20px 0px 10px 0px;\n    padding: 0px;\n  }\n\n  .add {\n    color: red;\n    cursor: pointer;\n    font-size: 20px;\n    margin: 0px 0px 0px 20px;\n  }\n</style>\n\n<script>\n  import { createEventDispatcher } from 'svelte';\n  \n  const dispatch = createEventDispatcher();\n  \n  let add = false;\n  let path = '';\n</script>\n",
    "<div id='aliases'>\n  {#each Object.entries(aliases) as [key, value]}\n    <div class='aliasLine'>\n      <span class='alias'>{key}</span>\n      <span class='equals'> = </span>\n      <span class='alias'>{value}</span>\n      <span\n        on:click={() => { deleteAlias(key,value); }}\n        class='delete'\n      >\n        X\n      </span>\n    </div>\n  {/each}\n</div>\n<AddAlias \n  on:newAlias={(e) => {\n    addAlias(e.detail.key, e.detail.def);\n  }}\n/>\n\n<style>\n  #aliases {\n    display: flex;\n    flex-direction: column;\n    padding: 0px;\n    margin: 0px 0px 10px 0px;\n    width: 100%;\n  }\n\n  .alias {\n    margin: 5px 0px 0px 10px;\n  }\n\n  .equals {\n    margin: 0px 10px 0px 10px;\n  }\n\n  .aliasLine {\n    display: flex;\n    flex-direction: row;\n  }\n\n  .delete {\n    color: red;\n    height: 20px;\n    width: 100px;\n    margin: 5px 0px 0px auto;\n    cursor: pointer;\n  }\n</style>\n\n<script>\n  import { onMount } from 'svelte';\n  \n  import AddAlias from '../components/AddAlias.svelte';\n\n  export let fig;\n\n  let rawFile = '';\n  let aliases = [];\n  \n  onMount(() => {\n    fig.fread('~/.fig/exports/aliases.fish', (data, err) => {\n      if(err) {\n        //\n        // Error: file most likely doesn't exist. Read from zsh version.\n        //\n        aliases = [];\n        saveAliases();\n      } else {\n        //\n        // Read the aliases that we currently have.\n        //\n        if((data !== null)&&(typeof data === 'string')&&(data !== '')) {\n          rawFile = data.split('\\n');\n          aliases = [];\n          rawFile.forEach((line) => {\n            if(line.includes('alias')) {\n              var parts = line.split('=');\n              aliases[parts[0].split(' ')[1]] = parts[1].replace(new RegExp('\\\"','g'),'');\n            }\n          });\n        }\n      }\n      aliases = aliases;\n    });\n  });\n\n  function addAlias(newAlias, newDef) {\n    if((typeof newAlias === 'string')&&\n       (typeof newDef === 'string')&&\n       (newAlias !== '')&&\n       (newDef !== '')) {\n      aliases[newAlias] = newDef;\n      saveAliases();\n      aliases = aliases;\n    }\n  }\n\n  function saveAliases() {\n    var saveFile = '';\n    for( var key in aliases) {\n      saveFile += `alias ${key}=\"${aliases[key]}\"\\n`;\n    }\n    fig.fwrite('~/.fig/exports/aliases.fish', saveFile, (error) => {\n      console.log(`Error: ${error}`);\n    });\n  }\n\n  function deleteAlias(key, value) {\n    delete aliases[key];\n    saveAliases();\n    aliases = aliases;\n  }\n</script>\n\n",
    "<div id='paths'>\n  {#each paths as path}\n    <div class='pathLine'>\n      <span class='path'>{path}</span>\n      <span\n        on:click={() => { deletePath(path); }}\n        class='delete'\n      >\n        X\n      </span>\n    </div>\n  {/each}\n</div>\n<AddPath \n  on:newPath={(e) => {\n    addPath(e.detail);\n  }}\n/>\n\n<style>\n  #figPath {\n    display: flex;\n    flex-direction: column;\n    text-align: left;\n    padding: 0px;\n    margin: 0px;\n    width: 100%;\n  }\n\n  #paths {\n    display: flex;\n    flex-direction: column;\n    padding: 0px;\n    margin: 0px 0px 10px 0px;\n    width: 100%;\n  }\n\n  .path {\n    margin: 5px 0px 0px 10px;\n  }\n\n  .pathLine {\n    display: flex;\n    flex-direction: row;\n  }\n\n  .delete {\n    color: red;\n    height: 20px;\n    width: 100px;\n    margin: 5px 0px 0px auto;\n    cursor: pointer;\n  }\n</style>\n\n<script>\n  import { onMount } from 'svelte';\n  \n  import AddPath from '../components/AddPath.svelte';\n\n  export let fig;\n\n  let rawFile = '';\n  let paths = [];\n  let rawFigPath = '';\n  \n  onMount(() => {\n    fig.fread('~/.fig/exports/env.fish', (data, err) => {\n      if(err) {\n        //\n        // Error: file most likely doesn't exist. Read from zsh version.\n        //\n        fig.fread('~/.fig/exports/env.sh',(data, err) => {\n          if(err) {\n            paths = ['~/.fig/bin','~/run'];\n            rawFile = `set -xg FIGPATH \"~/.fig/bin:~/run\"\\n\\nsource \"~/.fig/exports/aliases.fish\"\\n`;\n            fig.fwrite('~/.fig/exports/env.fish', rawFile, (err) => {});\n          } else {\n            if((data !== null)&&(typeof data === 'string')&&(data !== '')) {\n              rawFile = data.split('\\n');\n              rawFigPath = rawFile.filter(line => line.includes('FIGPATH'))[0];\n              paths = rawFigPath.split('=')[1].replace(new RegExp('\\\"','g'),'').split(':');\n              rawFile = `set -xg FIGPATH \"~/.fig/bin:~/run\"\\n\\nsource \"~/.fig/exports/aliases.fish\"\\n`;\n              fig.fwrite('~/.fig/exports/env.fish',rawFile, (err) => {});\n            }\n        }});\n      } else {\n        //\n        // Read the paths that we currently have.\n        //\n        if((data !== null)&&(typeof data === 'string')&&(data !== '')) {\n          rawFile = data.split('\\n');\n          rawFigPath = rawFile.filter(line => line.includes('FIGPATH'))[0];\n          paths = rawFigPath.split(' ')[3].replace(new RegExp('\\\"','g'),'').split(':');\n        }\n      }\n    });\n  });\n\n  function addPath(newPath) {\n    if((typeof newPath === 'string')&&(newPath !== '')) {\n      paths.push(newPath);\n      savePaths();\n      paths = paths;\n    }\n  }\n\n  function savePaths() {\n    var saveFile = rawFile.map(line => {\n      if(line.includes('FIGPATH')) {\n        line = `set -xg FIGPATH \"${paths.join(':')}\"`;\n      }\n      return line;\n    });\n    fig.fwrite(\"~/.fig/exports/env.fish\", saveFile.join('\\n'), (error) => {\n      console.log(`Error: ${error}`);\n    });\n  }\n\n  function deletePath(line) {\n    paths = paths.filter(aline => !(aline === line));\n    savePaths();\n  }\n</script>\n\n"
  ],
  "names": [],
  "mappings": "AA2CE,aAAa,8BAAC,CAAC,AACb,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,MAAM,CAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CACzB,OAAO,CAAE,GAAG,AACd,CAAC,AAED,4BAAa,CAAC,KAAK,eAAC,CAAC,AACnB,KAAK,CAAE,KAAK,AACd,CAAC,AAED,MAAM,8BAAC,CAAC,AACN,MAAM,CAAE,GAAG,CACX,KAAK,CAAE,KAAK,AACd,CAAC,AAED,IAAI,8BAAC,CAAC,AACJ,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,OAAO,AACjB,CAAC;ACjCD,YAAY,cAAC,CAAC,AACZ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,MAAM,CAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CACzB,OAAO,CAAE,GAAG,AACd,CAAC,AAED,IAAI,cAAC,CAAC,AACJ,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,OAAO,CACf,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,AAC1B,CAAC;ACnBD,QAAQ,eAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CACxB,KAAK,CAAE,IAAI,AACb,CAAC,AAED,MAAM,eAAC,CAAC,AACN,MAAM,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,AAC1B,CAAC,AAED,OAAO,eAAC,CAAC,AACP,MAAM,CAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,AAC3B,CAAC,AAED,UAAU,eAAC,CAAC,AACV,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,AACrB,CAAC,AAED,OAAO,eAAC,CAAC,AACP,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CACxB,MAAM,CAAE,OAAO,AACjB,CAAC;ACpBD,MAAM,cAAC,CAAC,AACN,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CACxB,KAAK,CAAE,IAAI,AACb,CAAC,AAED,KAAK,cAAC,CAAC,AACL,MAAM,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,AAC1B,CAAC,AAED,SAAS,cAAC,CAAC,AACT,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,AACrB,CAAC,AAED,OAAO,cAAC,CAAC,AACP,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CACxB,MAAM,CAAE,OAAO,AACjB,CAAC"
}