
<script>
  import { onMount } from 'svelte';
  
  import Paths from './components/Paths.svelte';
  import Aliases from './components/Aliases.svelte';

  export let fig;

  let expert = false;
  let appData = {};
  let SETTINGSFILE = '~/.config/fish/fishysettings.json';
  
  onMount(() => {
    //
    // Get the fishy settings application information.
    //
    fig.fread(SETTINGSFILE,(data, err) => {
      if(err) {
        appData = { 
          expert: false
        };
        expert = false;
        fig.fwrite(SETTINGSFILE, JSON.stringify({ expert: expert}), (err) => {});
      } else {
        appData = JSON.parse(data);
        expert = appData.expert;
      }
    });

    //
    // Check for the fish init function for fish and adding to the
    // prompt okay.
    //
    fig.fread('~/.config/fish/functions/fig_init.fish',(data, err) => {
      if(err) {
        //
        // The fig init function isn't made.
        //
        fig.fwrite('~/.config/fish/functions/fig_init.fish',`
function fig_init
  if set -q FIG_ENV_VAR
    fig bg:init (tty)
    fig bg:cd || true

    set -xg TTY (tty)
    set -xg FIG_ENV_VAR 1
    fig source
  end
end
        `);
        fig.execute('echo "\nfig_init\n" >> ~/.config/fish/conf.d/env.fish',(err) => {});
      }
    });

    //
    // Add the commands to the fish_prompt.
    //
    fig.fread('~/.config/fish/functions/fish_prompt.fish',(data, err) => {
      if(err) {
        //
        // No function file. Create it as we need it.
        //
        fig.fwrite('~/.config/fish/functions/fish_prompt.fish',`
function fish_prompt
  pwd > ~/.path
  fig bg:cd
  "$ "
end
        `);
      } else {
        var result = [];
        var hasIt = false;
        data.split('\n').forEach( (line) => {
          result.push(line);
          if(line.includes('fish_prompt')) {
            result.push("\tpwd > ~/.path\n\tfig bg:cd\n");
          }
          if(line.includes('fig bg:cd')) {
            hasIt = true;
          }
        });
        if(!hasIt) {
          fig.fwrite('~/.config/fish/functions/fish_prompt.fish', result.join("\n"));
        }
      }
    });
  });

  function close() {
    fig.reposition("7");
  }
  
  function toggleExpertSave() {
    fig.fwrite(SETTINGSFILE, JSON.stringify({ expert: !expert}), (err) => {});
    expert = !expert;
  }

  function reload() {
    fig.run("source ~/.fig/user/aliases/env.fish", (out, err) => {});
  }
</script>

<div style="display: flex; flex-direction: column;">
<div style="display: flex; flex-direction: row;">
<label for='expert'>Expert</label>
<input id='expert' name='expert' type='checkbox' checked={expert} on:change={toggleExpertSave} style="margin: 3px 0px 0px 10px;" />
</div>

{#if !expert}

## Fishy Settings

This application for fig is for setting up search paths and aliases to 
use with the [fig](https://docs.withfig.com/) terminal assistant. The paths 
are the different locations on your system to search for fig Rundown documents 
and applications.

{/if}

### Fig Paths

{#if !expert}

To add a path, simply click the red plus at the bottom of the list of paths. 
Then, add the new path to the input box given and press the enter key or 
the red plus sign at the end of the input box.

To remove an path, just click on the red `X` at the end of the line.

{/if}

<Paths 
  fig={fig}
/>

### Fig Aliases

{#if !expert}

Aliases are ways to set a smaller command line command to a larger string 
that is harder for you to remember. If you are typing something a 
whole lot that can be made into an alias, then make an alias!

To add an alias, press the red plus after the list of aliases. The input 
to the left is for the alias name (what you will type to activate the alias), 
and the command line to execute in the input box after the equal sign.

To remove an alias, just click on the red `X` at the end of the line.

{/if}

<Aliases
  fig={fig}
/>

{#if !expert}

## Reload Environment

This command will source the environment in the current shell to get the 
new settings defined in this application.

{/if}

<button style="margin: 10px 0px 5px 0px;"
        on:click={() => { reload();}}
>
  Reload
</button>

{#if !expert}

## Close the Application

This button will close the application, but the changes have already been 
saved. Come back soon!

{/if}

<button
  on:click={() => { close(); }}
>
  Close
</button>
</div>
